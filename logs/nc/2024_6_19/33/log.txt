INFO:root:Using: cuda:0
INFO:root:Using seed 18.
INFO:root:Dataset: cornell
INFO:root:Num classes: 5
INFO:root:NCModel(
  (encoder): BKNet(
    (linear_before): BLinear(in_features=1703, out_features=64, c=tensor([1.], device='cuda:0'))
    (layers): Sequential(
      (0): KPGraphConvolution(
        (net): KernelPointAggregation(
          (linears): ModuleList(
            (0): BLayer(
              (linear): BLinear(in_features=64, out_features=16, c=1)
              (act): BAct(c_in=tensor([1.], device='cuda:0'), c_out=tensor([1.], device='cuda:0'))
            )
            (1): BLayer(
              (linear): BLinear(in_features=64, out_features=16, c=1)
              (act): BAct(c_in=tensor([1.], device='cuda:0'), c_out=tensor([1.], device='cuda:0'))
            )
            (2): BLayer(
              (linear): BLinear(in_features=64, out_features=16, c=1)
              (act): BAct(c_in=tensor([1.], device='cuda:0'), c_out=tensor([1.], device='cuda:0'))
            )
            (3): BLayer(
              (linear): BLinear(in_features=64, out_features=16, c=1)
              (act): BAct(c_in=tensor([1.], device='cuda:0'), c_out=tensor([1.], device='cuda:0'))
            )
            (4): BLayer(
              (linear): BLinear(in_features=64, out_features=16, c=1)
              (act): BAct(c_in=tensor([1.], device='cuda:0'), c_out=tensor([1.], device='cuda:0'))
            )
            (5): BLayer(
              (linear): BLinear(in_features=64, out_features=16, c=1)
              (act): BAct(c_in=tensor([1.], device='cuda:0'), c_out=tensor([1.], device='cuda:0'))
            )
            (6): BLayer(
              (linear): BLinear(in_features=64, out_features=16, c=1)
              (act): BAct(c_in=tensor([1.], device='cuda:0'), c_out=tensor([1.], device='cuda:0'))
            )
            (7): BLayer(
              (linear): BLinear(in_features=64, out_features=16, c=1)
              (act): BAct(c_in=tensor([1.], device='cuda:0'), c_out=tensor([1.], device='cuda:0'))
            )
          )
        )
      )
      (1): KPGraphConvolution(
        (net): KernelPointAggregation(
          (linears): ModuleList(
            (0): BLayer(
              (linear): BLinear(in_features=16, out_features=16, c=1)
              (act): BAct(c_in=tensor([1.], device='cuda:0'), c_out=tensor([1.], device='cuda:0'))
            )
            (1): BLayer(
              (linear): BLinear(in_features=16, out_features=16, c=1)
              (act): BAct(c_in=tensor([1.], device='cuda:0'), c_out=tensor([1.], device='cuda:0'))
            )
            (2): BLayer(
              (linear): BLinear(in_features=16, out_features=16, c=1)
              (act): BAct(c_in=tensor([1.], device='cuda:0'), c_out=tensor([1.], device='cuda:0'))
            )
            (3): BLayer(
              (linear): BLinear(in_features=16, out_features=16, c=1)
              (act): BAct(c_in=tensor([1.], device='cuda:0'), c_out=tensor([1.], device='cuda:0'))
            )
            (4): BLayer(
              (linear): BLinear(in_features=16, out_features=16, c=1)
              (act): BAct(c_in=tensor([1.], device='cuda:0'), c_out=tensor([1.], device='cuda:0'))
            )
            (5): BLayer(
              (linear): BLinear(in_features=16, out_features=16, c=1)
              (act): BAct(c_in=tensor([1.], device='cuda:0'), c_out=tensor([1.], device='cuda:0'))
            )
            (6): BLayer(
              (linear): BLinear(in_features=16, out_features=16, c=1)
              (act): BAct(c_in=tensor([1.], device='cuda:0'), c_out=tensor([1.], device='cuda:0'))
            )
            (7): BLayer(
              (linear): BLinear(in_features=16, out_features=16, c=1)
              (act): BAct(c_in=tensor([1.], device='cuda:0'), c_out=tensor([1.], device='cuda:0'))
            )
          )
        )
      )
    )
  )
  (decoder): PoincareDecoder()
)
INFO:root:Total number of parameters: 120293
INFO:root:Epoch: 0005 lr: [0.001, 0.001] train_loss: 1.5903 train_acc: 0.5861 train_f1: 0.5861 time: 0.0898s
INFO:root:Epoch: 0005 val_loss: 1.5816 val_acc: 0.6591 val_f1: 0.6591
INFO:root:Epoch: 0010 lr: [0.001, 0.001] train_loss: 1.5665 train_acc: 0.5861 train_f1: 0.5861 time: 0.0894s
INFO:root:Epoch: 0010 val_loss: 1.5538 val_acc: 0.6591 val_f1: 0.6591
INFO:root:Epoch: 0015 lr: [0.001, 0.001] train_loss: 1.5428 train_acc: 0.5861 train_f1: 0.5861 time: 0.0900s
INFO:root:Epoch: 0015 val_loss: 1.5260 val_acc: 0.6591 val_f1: 0.6591
INFO:root:Epoch: 0020 lr: [0.001, 0.001] train_loss: 1.5193 train_acc: 0.5861 train_f1: 0.5861 time: 0.0942s
INFO:root:Epoch: 0020 val_loss: 1.4981 val_acc: 0.6591 val_f1: 0.6591
INFO:root:Epoch: 0025 lr: [0.001, 0.001] train_loss: 1.4959 train_acc: 0.5861 train_f1: 0.5861 time: 0.0899s
INFO:root:Epoch: 0025 val_loss: 1.4702 val_acc: 0.6591 val_f1: 0.6591
INFO:root:Epoch: 0030 lr: [0.001, 0.001] train_loss: 1.4726 train_acc: 0.5861 train_f1: 0.5861 time: 0.0899s
INFO:root:Epoch: 0030 val_loss: 1.4423 val_acc: 0.6591 val_f1: 0.6591
INFO:root:Epoch: 0035 lr: [0.001, 0.001] train_loss: 1.4494 train_acc: 0.5861 train_f1: 0.5861 time: 0.0894s
INFO:root:Epoch: 0035 val_loss: 1.4142 val_acc: 0.6591 val_f1: 0.6591
INFO:root:Epoch: 0040 lr: [0.001, 0.001] train_loss: 1.4264 train_acc: 0.5861 train_f1: 0.5861 time: 0.0920s
INFO:root:Epoch: 0040 val_loss: 1.3862 val_acc: 0.6591 val_f1: 0.6591
INFO:root:Epoch: 0045 lr: [0.001, 0.001] train_loss: 1.4037 train_acc: 0.5861 train_f1: 0.5861 time: 0.0897s
INFO:root:Epoch: 0045 val_loss: 1.3582 val_acc: 0.6591 val_f1: 0.6591
INFO:root:Epoch: 0050 lr: [0.001, 0.001] train_loss: 1.3814 train_acc: 0.5861 train_f1: 0.5861 time: 0.0937s
INFO:root:Epoch: 0050 val_loss: 1.3304 val_acc: 0.6591 val_f1: 0.6591
INFO:root:Epoch: 0055 lr: [0.001, 0.001] train_loss: 1.3596 train_acc: 0.5861 train_f1: 0.5861 time: 0.0889s
INFO:root:Epoch: 0055 val_loss: 1.3029 val_acc: 0.6591 val_f1: 0.6591
INFO:root:Epoch: 0060 lr: [0.001, 0.001] train_loss: 1.3385 train_acc: 0.5861 train_f1: 0.5861 time: 0.0893s
INFO:root:Epoch: 0060 val_loss: 1.2759 val_acc: 0.6591 val_f1: 0.6591
